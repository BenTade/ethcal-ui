{"version":3,"file":"ethcal-ui.umd.js","sources":["../src/calendar.js","../src/ui.js"],"sourcesContent":["/**\n * Ethiopian Calendar Utility\n * Converts between Gregorian and Ethiopian calendars\n * Ethiopian calendar has 13 months (12 months of 30 days + 1 month of 5/6 days)\n */\n\nclass EthiopianCalendar {\n  constructor() {\n    this.monthNames = [\n      'Meskerem', 'Tikimt', 'Hidar', 'Tahsas', 'Tir', 'Yekatit',\n      'Megabit', 'Miazia', 'Ginbot', 'Sene', 'Hamle', 'Nehase', 'Pagume'\n    ];\n\n    this.monthNamesAmharic = [\n      'መስከረም', 'ጥቅምት', 'ኅዳር', 'ታኅሣሥ', 'ጥር', 'የካቲት',\n      'መጋቢት', 'ሚያዝያ', 'ግንቦት', 'ሰኔ', 'ሐምሌ', 'ነሐሴ', 'ጳጉሜን'\n    ];\n    \n    this.dayNames = ['Ehud', 'Segno', 'Maksegno', 'Erob', 'Hamus', 'Arb', 'Kidame'];\n\n    this.dayNamesAmharic = ['እሁድ', 'ሰኞ', 'ማክሰኞ', 'ረቡዕ', 'ሐሙስ', 'ዓርብ', 'ቅዳሜ'];\n  }\n\n  /**\n   * Helper function to calculate Ethiopian new year day\n   * @param {number} year - Ethiopian year\n   * @returns {number} New year day\n   * @private\n   */\n  _startDayOfEthiopian(year) {\n    const newYearDay = Math.floor(year / 100) - Math.floor(year / 400) - 4;\n    // if the prev ethiopian year is a leap year, new-year occurs on 12th\n    return ((year - 1) % 4 === 3) ? newYearDay + 1 : newYearDay;\n  }\n\n  /**\n   * Convert Gregorian date to Ethiopian date\n   * @param {Date} gregorianDate - Gregorian date object\n   * @returns {Object} Ethiopian date {year, month, day}\n   */\n  toEthiopian(gregorianDate) {\n    const year = gregorianDate.getFullYear();\n    const month = gregorianDate.getMonth() + 1;\n    const date = gregorianDate.getDate();\n    \n    // Validate input\n    if (month === 10 && date >= 5 && date <= 14 && year === 1582) {\n      throw new Error('Invalid Date between 5-14 May 1582.');\n    }\n    \n    // Number of days in gregorian months starting with January (index 1)\n    const gregorianMonths = [0.0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    \n    // Number of days in ethiopian months starting with January (index 1)\n    const ethiopianMonths = [0.0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5, 30, 30, 30, 30];\n    \n    // if gregorian leap year, February has 29 days\n    if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {\n      gregorianMonths[2] = 29;\n    }\n    \n    // September sees 8y difference\n    let ethiopianYear = year - 8;\n    \n    // if ethiopian leap year pagumain has 6 days\n    if (ethiopianYear % 4 === 3) {\n      ethiopianMonths[10] = 6;\n    }\n    \n    // Ethiopian new year in Gregorian calendar\n    const newYearDay = this._startDayOfEthiopian(year - 8);\n    \n    // calculate number of days up to that date\n    let until = 0;\n    for (let i = 1; i < month; i++) {\n      until += gregorianMonths[i];\n    }\n    until += date;\n    \n    // update tahissas (december) to match january 1st\n    let tahissas = (ethiopianYear % 4) === 0 ? 26 : 25;\n    \n    // take into account the 1582 change\n    if (year < 1582) {\n      ethiopianMonths[1] = 0;\n      ethiopianMonths[2] = tahissas;\n    } else if (until <= 277 && year === 1582) {\n      ethiopianMonths[1] = 0;\n      ethiopianMonths[2] = tahissas;\n    } else {\n      tahissas = newYearDay - 3;\n      ethiopianMonths[1] = tahissas;\n    }\n    \n    // calculate month and date incremently\n    let m;\n    let ethiopianDate;\n    for (m = 1; m < ethiopianMonths.length; m++) {\n      if (until <= ethiopianMonths[m]) {\n        ethiopianDate = (m === 1 || ethiopianMonths[m] === 0) ? until + (30 - tahissas) : until;\n        break;\n      } else {\n        until -= ethiopianMonths[m];\n      }\n    }\n    \n    // if m > 10, we're already on next Ethiopian year\n    if (m > 10) {\n      ethiopianYear += 1;\n    }\n    \n    // Ethiopian months ordered according to Gregorian\n    const order = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4];\n    const ethiopianMonth = order[m];\n    \n    return {\n      year: ethiopianYear,\n      month: ethiopianMonth,\n      day: ethiopianDate\n    };\n  }\n\n  /**\n   * Convert Ethiopian date to Gregorian date\n   * @param {number} year - Ethiopian year\n   * @param {number} month - Ethiopian month (1-13)\n   * @param {number} day - Ethiopian day\n   * @returns {Date} Gregorian date object\n   */\n  toGregorian(year, month, day) {\n    // Ethiopian new year in Gregorian calendar\n    const newYearDay = this._startDayOfEthiopian(year);\n    \n    // September (Ethiopian) sees 7y difference\n    let gregorianYear = year + 7;\n    \n    // Number of days in gregorian months\n    // starting with September (index 1)\n    // Index 0 is reserved for leap years switches.\n    // Index 4 is December, the final month of the year.\n    let gregorianMonths = [0.0, 30, 31, 30, 31, 31, 28, 31, 30, 31, 30, 31, 31, 30];\n    \n    // if next gregorian year is leap year, February has 29 days.\n    const nextYear = gregorianYear + 1;\n    if ((nextYear % 4 === 0 && nextYear % 100 !== 0) || nextYear % 400 === 0) {\n      gregorianMonths[6] = 29;\n    }\n    \n    // calculate number of days up to that date\n    let until = ((month - 1) * 30.0) + day;\n    if (until <= 37 && year <= 1575) { // mysterious rule\n      until += 28;\n      gregorianMonths[0] = 31;\n    } else {\n      until += newYearDay - 1;\n    }\n    \n    // if ethiopian year is leap year, paguemain has six days\n    if ((year - 1) % 4 === 3) {\n      until += 1;\n    }\n    \n    // calculate month and date incremently\n    let m = 0;\n    let gregorianDate;\n    for (let i = 0; i < gregorianMonths.length; i++) {\n      if (until <= gregorianMonths[i]) {\n        m = i;\n        gregorianDate = until;\n        break;\n      } else {\n        m = i;\n        until -= gregorianMonths[i];\n      }\n    }\n    \n    // if m > 4, we're already on next Gregorian year\n    if (m > 4) {\n      gregorianYear += 1;\n    }\n    \n    // Gregorian months ordered according to Ethiopian\n    const order = [8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const gregorianMonth = order[m];\n    \n    return new Date(gregorianYear, gregorianMonth - 1, gregorianDate);\n  }\n\n  /**\n   * Get the number of days in an Ethiopian month\n   * @param {number} year - Ethiopian year\n   * @param {number} month - Ethiopian month (1-13)\n   * @returns {number} Number of days\n   */\n  getDaysInMonth(year, month) {\n    if (month < 13) {\n      return 30;\n    }\n    // Pagume has 5 days in common years, 6 in leap years\n    return this.isLeapYear(year) ? 6 : 5;\n  }\n\n  /**\n   * Check if an Ethiopian year is a leap year\n   * @param {number} year - Ethiopian year\n   * @returns {boolean} True if leap year\n   */\n  isLeapYear(year) {\n    return (year % 4) === 3;\n  }\n\n  /**\n   * Get the day of week for an Ethiopian date\n   * @param {number} year - Ethiopian year\n   * @param {number} month - Ethiopian month\n   * @param {number} day - Ethiopian day\n   * @returns {number} Day of week (0-6, 0 = Sunday)\n   */\n  getDayOfWeek(year, month, day) {\n    const gregDate = this.toGregorian(year, month, day);\n    return gregDate.getDay();\n  }\n\n  /**\n   * Get month name\n   * @param {number} month - Ethiopian month (1-13)\n   * @param {boolean} useAmharic - Use Amharic names\n   * @returns {string} Month name\n   */\n  getMonthName(month, useAmharic = false) {\n    const names = useAmharic ? this.monthNamesAmharic : this.monthNames;\n    return names[month - 1] || '';\n  }\n\n  /**\n   * Get day name\n   * @param {number} dayOfWeek - Day of week (0-6)\n   * @param {boolean} useAmharic - Use Amharic names\n   * @returns {string} Day name\n   */\n  getDayName(dayOfWeek, useAmharic = false) {\n    const names = useAmharic ? this.dayNamesAmharic : this.dayNames;\n    return names[dayOfWeek] || '';\n  }\n\n  /**\n   * Convert Arabic numerals to Ethiopic numerals\n   * @param {number} num - Number to convert\n   * @returns {string} Ethiopic numeral representation\n   */\n  toEthiopicNumeral(num) {\n    if (num === 0) return '0';\n    \n    const ethiopicNumerals = {\n      1: '፩', 2: '፪', 3: '፫', 4: '፬', 5: '፭',\n      6: '፮', 7: '፯', 8: '፰', 9: '፱', 10: '፲',\n      20: '፳', 30: '፴', 40: '፵', 50: '፶',\n      60: '፷', 70: '፸', 80: '፹', 90: '፺',\n      100: '፻', 10000: '፼'\n    };\n\n    if (ethiopicNumerals[num]) {\n      return ethiopicNumerals[num];\n    }\n\n    let result = '';\n    let remaining = num;\n\n    // Handle tens and ones (up to 99)\n    if (remaining < 100) {\n      const tens = Math.floor(remaining / 10) * 10;\n      const ones = remaining % 10;\n      \n      if (tens > 0) result += ethiopicNumerals[tens];\n      if (ones > 0) result += ethiopicNumerals[ones];\n      \n      return result;\n    }\n\n    // For numbers >= 100, use a simpler digit-by-digit approach\n    const digits = num.toString().split('');\n    return digits.map(d => ethiopicNumerals[parseInt(d)] || d).join('');\n  }\n\n  /**\n   * Get current Ethiopian date\n   * @returns {Object} Ethiopian date {year, month, day}\n   */\n  now() {\n    return this.toEthiopian(new Date());\n  }\n}\n\nexport default EthiopianCalendar;\n","import EthiopianCalendar from './calendar.js';\n\n/**\n * Ethiopian Calendar UI Popup Component\n */\nclass EthiopianCalendarUI {\n  constructor(options = {}) {\n    this.calendar = new EthiopianCalendar();\n    this.options = {\n      onSelect: options.onSelect || null,\n      inputElement: options.inputElement || null,\n      initialDate: options.initialDate || new Date(),\n      showGregorian: options.showGregorian !== undefined ? options.showGregorian : true,\n      useAmharic: options.useAmharic !== undefined ? options.useAmharic : true,\n      useEthiopicNumbers: options.useEthiopicNumbers !== undefined ? options.useEthiopicNumbers : false,\n      mergedView: options.mergedView !== undefined ? options.mergedView : false,\n      primaryCalendar: options.primaryCalendar || 'ethiopian', // 'ethiopian' or 'gregorian'\n      ...options\n    };\n    \n    this.currentEthDate = this.calendar.toEthiopian(this.options.initialDate);\n    this.selectedDate = null;\n    this.popup = null;\n  }\n\n  /**\n   * Create and show the calendar popup\n   */\n  show() {\n    if (this.popup) {\n      this.popup.style.display = 'block';\n      return;\n    }\n\n    this.popup = this.createPopup();\n    document.body.appendChild(this.popup);\n    \n    // Position popup\n    this.positionPopup();\n    \n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Hide the calendar popup\n   */\n  hide() {\n    if (this.popup) {\n      this.popup.style.display = 'none';\n    }\n  }\n\n  /**\n   * Destroy the popup\n   */\n  destroy() {\n    if (this.popup) {\n      this.popup.remove();\n      this.popup = null;\n    }\n  }\n\n  /**\n   * Create the popup DOM structure\n   */\n  createPopup() {\n    const popup = document.createElement('div');\n    popup.className = 'ethcal-popup';\n    \n    const dayNamesHtml = this.options.useAmharic \n      ? '<div>እሁድ</div><div>ሰኞ</div><div>ማክሰኞ</div><div>ረቡዕ</div><div>ሐሙስ</div><div>ዓርብ</div><div>ቅዳሜ</div>'\n      : '<div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>';\n\n    // Merged view - single calendar showing both dates\n    if (this.options.mergedView) {\n      const isPrimaryEthiopian = this.options.primaryCalendar === 'ethiopian';\n      // Determine button labels based on primary calendar\n      const yearPrevLabel = isPrimaryEthiopian ? 'አ<' : 'Y<';\n      const monthPrevLabel = isPrimaryEthiopian ? 'ወ<' : 'M<';\n      const monthNextLabel = isPrimaryEthiopian ? 'ወ>' : 'M>';\n      const yearNextLabel = isPrimaryEthiopian ? 'አ>' : 'Y>';\n      \n      popup.innerHTML = `\n        <div class=\"ethcal-calendars ethcal-merged\">\n          <div class=\"ethcal-calendar ethcal-merged-calendar\">\n            <div class=\"ethcal-header\">\n              <button class=\"ethcal-prev-year\" aria-label=\"Previous Year\">${yearPrevLabel}</button>\n              <button class=\"ethcal-prev-month\" aria-label=\"Previous Month\">${monthPrevLabel}</button>\n              <div class=\"ethcal-current\">\n                <div class=\"ethcal-primary-header\">\n                  <span class=\"ethcal-month-name\"></span>\n                  <span class=\"ethcal-year\"></span>\n                </div>\n                <div class=\"ethcal-secondary-header\">\n                  <span class=\"ethcal-secondary-month-name\"></span>\n                  <span class=\"ethcal-secondary-year\"></span>\n                </div>\n              </div>\n              <button class=\"ethcal-next-month\" aria-label=\"Next Month\">${monthNextLabel}</button>\n              <button class=\"ethcal-next-year\" aria-label=\"Next Year\">${yearNextLabel}</button>\n            </div>\n            <div class=\"ethcal-weekdays\">${dayNamesHtml}</div>\n            <div class=\"ethcal-days ethcal-merged-days\"></div>\n          </div>\n        </div>\n        <div class=\"ethcal-footer\">\n          <button class=\"ethcal-today\">Today</button>\n        </div>\n      `;\n    } else {\n      // Original side-by-side view\n      popup.innerHTML = `\n        <div class=\"ethcal-calendars\">\n          <div class=\"ethcal-calendar ethcal-ethiopian\">\n            <div class=\"ethcal-header\">\n              <button class=\"ethcal-prev-year\" aria-label=\"Previous Year\">አ<</button>\n              <button class=\"ethcal-prev-month\" aria-label=\"Previous Month\">ወ<</button>\n              <div class=\"ethcal-current\">\n                <span class=\"ethcal-month-name\"></span>\n                <span class=\"ethcal-year\"></span>\n              </div>\n              <button class=\"ethcal-next-month\" aria-label=\"Next Month\">ወ></button>\n              <button class=\"ethcal-next-year\" aria-label=\"Next Year\">አ></button>\n            </div>\n            <div class=\"ethcal-weekdays\">${dayNamesHtml}</div>\n            <div class=\"ethcal-days\"></div>\n          </div>\n          ${this.options.showGregorian ? `\n          <div class=\"ethcal-calendar ethcal-gregorian\">\n            <div class=\"ethcal-header\">\n              <button class=\"ethcal-greg-prev-year\" aria-label=\"Previous Year\">Y<</button>\n              <button class=\"ethcal-greg-prev-month\" aria-label=\"Previous Month\">M<</button>\n              <div class=\"ethcal-current\">\n                <span class=\"ethcal-greg-month-name\"></span>\n                <span class=\"ethcal-greg-year\"></span>\n              </div>\n              <button class=\"ethcal-greg-next-month\" aria-label=\"Next Month\">M></button>\n              <button class=\"ethcal-greg-next-year\" aria-label=\"Next Year\">Y></button>\n            </div>\n            <div class=\"ethcal-weekdays\">\n              <div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>\n            </div>\n            <div class=\"ethcal-greg-days\"></div>\n          </div>\n          ` : ''}\n        </div>\n        <div class=\"ethcal-footer\">\n          <button class=\"ethcal-today\">Today</button>\n        </div>\n      `;\n    }\n    return popup;\n  }\n\n  /**\n   * Position popup near input element\n   */\n  positionPopup() {\n    if (this.options.inputElement) {\n      const rect = this.options.inputElement.getBoundingClientRect();\n      this.popup.style.position = 'absolute';\n      this.popup.style.top = (rect.bottom + window.scrollY + 5) + 'px';\n      this.popup.style.left = (rect.left + window.scrollX) + 'px';\n    } else {\n      // Center the popup if no input element\n      this.popup.style.position = 'fixed';\n      this.popup.style.top = '50%';\n      this.popup.style.left = '50%';\n      this.popup.style.transform = 'translate(-50%, -50%)';\n    }\n  }\n\n  /**\n   * Render the calendar\n   */\n  render() {\n    const { year, month } = this.currentEthDate;\n    \n    // Update calendar header\n    if (this.options.mergedView) {\n      const isPrimaryEthiopian = this.options.primaryCalendar === 'ethiopian';\n      \n      // Update button labels based on primary calendar\n      const yearPrevLabel = isPrimaryEthiopian ? 'አ<' : 'Y<';\n      const monthPrevLabel = isPrimaryEthiopian ? 'ወ<' : 'M<';\n      const monthNextLabel = isPrimaryEthiopian ? 'ወ>' : 'M>';\n      const yearNextLabel = isPrimaryEthiopian ? 'አ>' : 'Y>';\n      \n      this.popup.querySelector('.ethcal-prev-year').textContent = yearPrevLabel;\n      this.popup.querySelector('.ethcal-prev-month').textContent = monthPrevLabel;\n      this.popup.querySelector('.ethcal-next-month').textContent = monthNextLabel;\n      this.popup.querySelector('.ethcal-next-year').textContent = yearNextLabel;\n      \n      const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',\n                          'July', 'August', 'September', 'October', 'November', 'December'];\n      \n      if (isPrimaryEthiopian) {\n        // Ethiopian is primary - use Amharic names and Ethiopian month\n        const primaryMonthName = this.calendar.getMonthName(month, true);\n        const primaryYear = year;\n        \n        this.popup.querySelector('.ethcal-month-name').textContent = primaryMonthName;\n        this.popup.querySelector('.ethcal-year').textContent = primaryYear;\n        \n        // Get secondary (Gregorian) month range\n        const secondaryRange = this.getSecondaryMonthRange(year, month, true);\n        let secondaryText = '';\n        \n        if (secondaryRange.isSameMonth) {\n          secondaryText = `${monthNames[secondaryRange.startMonth]} ${secondaryRange.startYear}`;\n        } else {\n          // Different months - show as range\n          const startMonthName = monthNames[secondaryRange.startMonth];\n          const endMonthName = monthNames[secondaryRange.endMonth];\n          \n          if (secondaryRange.startYear === secondaryRange.endYear) {\n            secondaryText = `${startMonthName} - ${endMonthName} ${secondaryRange.startYear}`;\n          } else {\n            secondaryText = `${startMonthName} ${secondaryRange.startYear} - ${endMonthName} ${secondaryRange.endYear}`;\n          }\n        }\n        \n        this.popup.querySelector('.ethcal-secondary-month-name').textContent = secondaryText;\n        this.popup.querySelector('.ethcal-secondary-year').textContent = '';\n      } else {\n        // Gregorian is primary - use English names and Gregorian month\n        const gregDate = this.calendar.toGregorian(year, month, 1);\n        const gregYear = gregDate.getFullYear();\n        const gregMonth = gregDate.getMonth();\n        \n        this.popup.querySelector('.ethcal-month-name').textContent = monthNames[gregMonth];\n        this.popup.querySelector('.ethcal-year').textContent = gregYear;\n        \n        // Get secondary (Ethiopian) month range - use Ethiopic script\n        const secondaryRange = this.getSecondaryMonthRange(gregYear, gregMonth, false);\n        let secondaryText = '';\n        \n        if (secondaryRange.isSameMonth) {\n          const ethMonthName = this.calendar.getMonthName(secondaryRange.startMonth, true);\n          secondaryText = `${ethMonthName} ${secondaryRange.startYear}`;\n        } else {\n          // Different months - show as range using Ethiopic script\n          const startMonthName = this.calendar.getMonthName(secondaryRange.startMonth, true);\n          const endMonthName = this.calendar.getMonthName(secondaryRange.endMonth, true);\n          \n          if (secondaryRange.startYear === secondaryRange.endYear) {\n            secondaryText = `${startMonthName} - ${endMonthName} ${secondaryRange.startYear}`;\n          } else {\n            secondaryText = `${startMonthName} ${secondaryRange.startYear} - ${endMonthName} ${secondaryRange.endYear}`;\n          }\n        }\n        \n        this.popup.querySelector('.ethcal-secondary-month-name').textContent = secondaryText;\n        this.popup.querySelector('.ethcal-secondary-year').textContent = '';\n      }\n      \n      const titleElement = this.popup.querySelector('.ethcal-calendar-title');\n      if (titleElement) {\n        titleElement.textContent = `${isPrimaryEthiopian ? 'Ethiopian' : 'Gregorian'} Calendar (Primary)`;\n      }\n    } else {\n      // Non-merged view - use the useAmharic option\n      this.popup.querySelector('.ethcal-month-name').textContent = \n        this.calendar.getMonthName(month, this.options.useAmharic);\n      // Year - always use Arabic numerals (not Ethiopic numbers)\n      this.popup.querySelector('.ethcal-year').textContent = year;\n    }\n    \n    // Update weekday names based on primary calendar or useAmharic option\n    this.updateWeekdayNames();\n    \n    // Render appropriate calendar view\n    if (this.options.mergedView) {\n      this.renderMergedCalendar();\n    } else {\n      // Render Ethiopian calendar days\n      this.renderDays();\n      \n      // Render Gregorian calendar if enabled\n      if (this.options.showGregorian) {\n        this.renderGregorianCalendar();\n      }\n    }\n  }\n\n  /**\n   * Update weekday names based on options\n   */\n  updateWeekdayNames() {\n    const selector = this.options.mergedView ? '.ethcal-merged-calendar .ethcal-weekdays' : '.ethcal-ethiopian .ethcal-weekdays';\n    const weekdaysContainer = this.popup.querySelector(selector);\n    if (weekdaysContainer) {\n      // In merged view, use primary calendar's language\n      // In non-merged view, use the useAmharic option\n      const useAmharic = this.options.mergedView \n        ? (this.options.primaryCalendar === 'ethiopian')\n        : this.options.useAmharic;\n      \n      if (useAmharic) {\n        weekdaysContainer.innerHTML = '<div>እሁድ</div><div>ሰኞ</div><div>ማክሰኞ</div><div>ረቡዕ</div><div>ሐሙስ</div><div>ዓርብ</div><div>ቅዳሜ</div>';\n      } else {\n        weekdaysContainer.innerHTML = '<div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>';\n      }\n    }\n  }\n\n  /**\n   * Render calendar days\n   */\n  renderDays() {\n    const { year, month } = this.currentEthDate;\n    const daysContainer = this.popup.querySelector('.ethcal-days');\n    daysContainer.innerHTML = '';\n    \n    const daysInMonth = this.calendar.getDaysInMonth(year, month);\n    const firstDayOfWeek = this.calendar.getDayOfWeek(year, month, 1);\n    \n    // Add empty cells for days before month starts\n    for (let i = 0; i < firstDayOfWeek; i++) {\n      const emptyCell = document.createElement('div');\n      emptyCell.className = 'ethcal-day ethcal-empty';\n      daysContainer.appendChild(emptyCell);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dayCell = document.createElement('div');\n      dayCell.className = 'ethcal-day';\n      const dayText = this.options.useEthiopicNumbers \n        ? this.calendar.toEthiopicNumeral(day)\n        : day;\n      dayCell.textContent = dayText;\n      dayCell.dataset.day = day;\n      dayCell.dataset.month = month;\n      dayCell.dataset.year = year;\n      \n      // Highlight today\n      const today = this.calendar.now();\n      if (year === today.year && month === today.month && day === today.day) {\n        dayCell.classList.add('ethcal-today-highlight');\n      }\n      \n      // Highlight selected date\n      if (this.selectedDate && \n          year === this.selectedDate.year && \n          month === this.selectedDate.month && \n          day === this.selectedDate.day) {\n        dayCell.classList.add('ethcal-selected');\n      }\n      \n      daysContainer.appendChild(dayCell);\n    }\n  }\n\n  /**\n   * Render Gregorian calendar\n   */\n  renderGregorianCalendar() {\n    const { year, month } = this.currentEthDate;\n    const gregDate = this.calendar.toGregorian(year, month, 1); // Use first day of month\n    const gregYear = gregDate.getFullYear();\n    const gregMonth = gregDate.getMonth();\n    \n    // Update header\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',\n                        'July', 'August', 'September', 'October', 'November', 'December'];\n    this.popup.querySelector('.ethcal-greg-month-name').textContent = monthNames[gregMonth];\n    this.popup.querySelector('.ethcal-greg-year').textContent = gregYear;\n    \n    // Render days\n    const daysContainer = this.popup.querySelector('.ethcal-greg-days');\n    daysContainer.innerHTML = '';\n    \n    const firstDay = new Date(gregYear, gregMonth, 1).getDay();\n    const daysInMonth = new Date(gregYear, gregMonth + 1, 0).getDate();\n    \n    // Add empty cells\n    for (let i = 0; i < firstDay; i++) {\n      const emptyCell = document.createElement('div');\n      emptyCell.className = 'ethcal-day ethcal-empty';\n      daysContainer.appendChild(emptyCell);\n    }\n    \n    // Add days\n    const todayGreg = new Date();\n    for (let d = 1; d <= daysInMonth; d++) {\n      const dayCell = document.createElement('div');\n      dayCell.className = 'ethcal-day ethcal-greg-day';\n      dayCell.textContent = d;\n      dayCell.dataset.day = d;\n      dayCell.dataset.month = gregMonth;\n      dayCell.dataset.year = gregYear;\n      \n      // Highlight today\n      if (gregYear === todayGreg.getFullYear() && \n          gregMonth === todayGreg.getMonth() && \n          d === todayGreg.getDate()) {\n        dayCell.classList.add('ethcal-today-highlight');\n      }\n      \n      // Highlight if this Gregorian date corresponds to the selected Ethiopian date\n      if (this.selectedDate) {\n        const selectedGreg = this.calendar.toGregorian(\n          this.selectedDate.year, \n          this.selectedDate.month, \n          this.selectedDate.day\n        );\n        if (gregYear === selectedGreg.getFullYear() && \n            gregMonth === selectedGreg.getMonth() && \n            d === selectedGreg.getDate()) {\n          dayCell.classList.add('ethcal-selected');\n        }\n      }\n      \n      daysContainer.appendChild(dayCell);\n    }\n  }\n\n  /**\n   * Get the secondary month range for a given primary month\n   * Returns the secondary months that overlap with the primary month\n   */\n  getSecondaryMonthRange(year, month, isPrimaryEthiopian) {\n    if (isPrimaryEthiopian) {\n      // Primary is Ethiopian, secondary is Gregorian\n      const firstDay = this.calendar.toGregorian(year, month, 1);\n      const daysInMonth = this.calendar.getDaysInMonth(year, month);\n      const lastDay = this.calendar.toGregorian(year, month, daysInMonth);\n      \n      const firstMonth = firstDay.getMonth();\n      const firstYear = firstDay.getFullYear();\n      const lastMonth = lastDay.getMonth();\n      const lastYear = lastDay.getFullYear();\n      \n      return {\n        startMonth: firstMonth,\n        startYear: firstYear,\n        endMonth: lastMonth,\n        endYear: lastYear,\n        isSameMonth: firstMonth === lastMonth && firstYear === lastYear\n      };\n    } else {\n      // Primary is Gregorian, secondary is Ethiopian\n      const firstDay = new Date(year, month, 1);\n      const lastDay = new Date(year, month + 1, 0); // Last day of month\n      \n      const firstEth = this.calendar.toEthiopian(firstDay);\n      const lastEth = this.calendar.toEthiopian(lastDay);\n      \n      return {\n        startMonth: firstEth.month,\n        startYear: firstEth.year,\n        endMonth: lastEth.month,\n        endYear: lastEth.year,\n        isSameMonth: firstEth.month === lastEth.month && firstEth.year === lastEth.year\n      };\n    }\n  }\n\n  /**\n   * Render merged calendar showing both Ethiopian and Gregorian dates\n   */\n  renderMergedCalendar() {\n    const { year, month } = this.currentEthDate;\n    const isPrimaryEthiopian = this.options.primaryCalendar === 'ethiopian';\n    \n    const daysContainer = this.popup.querySelector('.ethcal-merged-days');\n    daysContainer.innerHTML = '';\n    \n    if (isPrimaryEthiopian) {\n      // Ethiopian is primary\n      const daysInMonth = this.calendar.getDaysInMonth(year, month);\n      const firstDayOfWeek = this.calendar.getDayOfWeek(year, month, 1);\n      \n      // Add empty cells for days before month starts\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const emptyCell = document.createElement('div');\n        emptyCell.className = 'ethcal-day ethcal-empty';\n        daysContainer.appendChild(emptyCell);\n      }\n      \n      // Add days of the month\n      const today = this.calendar.now();\n      for (let day = 1; day <= daysInMonth; day++) {\n        const dayCell = document.createElement('div');\n        dayCell.className = 'ethcal-day ethcal-merged-day';\n        \n        // Primary date (Ethiopian) - use Ethiopic numbers if enabled\n        const primaryText = this.options.useEthiopicNumbers \n          ? this.calendar.toEthiopicNumeral(day)\n          : day;\n        \n        // Secondary date (Gregorian) - always use Arabic numerals\n        const gregDate = this.calendar.toGregorian(year, month, day);\n        const secondaryText = gregDate.getDate();\n        \n        dayCell.innerHTML = `\n          <span class=\"ethcal-primary-date\">${primaryText}</span>\n          <span class=\"ethcal-secondary-date\">${secondaryText}</span>\n        `;\n        \n        dayCell.dataset.day = day;\n        dayCell.dataset.month = month;\n        dayCell.dataset.year = year;\n        dayCell.dataset.gregDay = gregDate.getDate();\n        dayCell.dataset.gregMonth = gregDate.getMonth();\n        dayCell.dataset.gregYear = gregDate.getFullYear();\n        \n        // Highlight today\n        if (year === today.year && month === today.month && day === today.day) {\n          dayCell.classList.add('ethcal-today-highlight');\n        }\n        \n        // Highlight selected date\n        if (this.selectedDate && \n            year === this.selectedDate.year && \n            month === this.selectedDate.month && \n            day === this.selectedDate.day) {\n          dayCell.classList.add('ethcal-selected');\n        }\n        \n        daysContainer.appendChild(dayCell);\n      }\n    } else {\n      // Gregorian is primary\n      const gregDate = this.calendar.toGregorian(year, month, 1);\n      const gregYear = gregDate.getFullYear();\n      const gregMonth = gregDate.getMonth();\n      \n      const firstDay = new Date(gregYear, gregMonth, 1).getDay();\n      const daysInMonth = new Date(gregYear, gregMonth + 1, 0).getDate();\n      \n      // Add empty cells\n      for (let i = 0; i < firstDay; i++) {\n        const emptyCell = document.createElement('div');\n        emptyCell.className = 'ethcal-day ethcal-empty';\n        daysContainer.appendChild(emptyCell);\n      }\n      \n      // Add days\n      const todayGreg = new Date();\n      for (let d = 1; d <= daysInMonth; d++) {\n        const dayCell = document.createElement('div');\n        dayCell.className = 'ethcal-day ethcal-merged-day';\n        \n        // Primary date (Gregorian) - always use Arabic numerals\n        const primaryText = d;\n        \n        // Secondary date (Ethiopian) - use Ethiopic numbers if enabled\n        const currentGreg = new Date(gregYear, gregMonth, d);\n        const ethDate = this.calendar.toEthiopian(currentGreg);\n        const secondaryText = this.options.useEthiopicNumbers \n          ? this.calendar.toEthiopicNumeral(ethDate.day)\n          : ethDate.day;\n        \n        dayCell.innerHTML = `\n          <span class=\"ethcal-primary-date\">${primaryText}</span>\n          <span class=\"ethcal-secondary-date\">${secondaryText}</span>\n        `;\n        \n        dayCell.dataset.day = ethDate.day;\n        dayCell.dataset.month = ethDate.month;\n        dayCell.dataset.year = ethDate.year;\n        dayCell.dataset.gregDay = d;\n        dayCell.dataset.gregMonth = gregMonth;\n        dayCell.dataset.gregYear = gregYear;\n        \n        // Highlight today\n        if (gregYear === todayGreg.getFullYear() && \n            gregMonth === todayGreg.getMonth() && \n            d === todayGreg.getDate()) {\n          dayCell.classList.add('ethcal-today-highlight');\n        }\n        \n        // Highlight selected date\n        if (this.selectedDate) {\n          const selectedGreg = this.calendar.toGregorian(\n            this.selectedDate.year, \n            this.selectedDate.month, \n            this.selectedDate.day\n          );\n          if (gregYear === selectedGreg.getFullYear() && \n              gregMonth === selectedGreg.getMonth() && \n              d === selectedGreg.getDate()) {\n            dayCell.classList.add('ethcal-selected');\n          }\n        }\n        \n        daysContainer.appendChild(dayCell);\n      }\n    }\n  }\n\n  /**\n   * Attach event listeners\n   */\n  attachEventListeners() {\n    // Ethiopian calendar navigation buttons\n    this.popup.querySelector('.ethcal-prev-year').addEventListener('click', () => {\n      this.currentEthDate.year--;\n      this.render();\n    });\n    \n    this.popup.querySelector('.ethcal-next-year').addEventListener('click', () => {\n      this.currentEthDate.year++;\n      this.render();\n    });\n    \n    this.popup.querySelector('.ethcal-prev-month').addEventListener('click', () => {\n      this.currentEthDate.month--;\n      if (this.currentEthDate.month < 1) {\n        this.currentEthDate.month = 13;\n        this.currentEthDate.year--;\n      }\n      this.render();\n    });\n    \n    this.popup.querySelector('.ethcal-next-month').addEventListener('click', () => {\n      this.currentEthDate.month++;\n      if (this.currentEthDate.month > 13) {\n        this.currentEthDate.month = 1;\n        this.currentEthDate.year++;\n      }\n      this.render();\n    });\n\n    // Gregorian calendar navigation buttons (if enabled and not merged)\n    if (this.options.showGregorian && !this.options.mergedView) {\n      this.popup.querySelector('.ethcal-greg-prev-year').addEventListener('click', () => {\n        const gregDate = this.calendar.toGregorian(this.currentEthDate.year, this.currentEthDate.month, 15);\n        gregDate.setFullYear(gregDate.getFullYear() - 1);\n        this.currentEthDate = this.calendar.toEthiopian(gregDate);\n        this.render();\n      });\n      \n      this.popup.querySelector('.ethcal-greg-next-year').addEventListener('click', () => {\n        const gregDate = this.calendar.toGregorian(this.currentEthDate.year, this.currentEthDate.month, 15);\n        gregDate.setFullYear(gregDate.getFullYear() + 1);\n        this.currentEthDate = this.calendar.toEthiopian(gregDate);\n        this.render();\n      });\n      \n      this.popup.querySelector('.ethcal-greg-prev-month').addEventListener('click', () => {\n        const gregDate = this.calendar.toGregorian(this.currentEthDate.year, this.currentEthDate.month, 15);\n        gregDate.setMonth(gregDate.getMonth() - 1);\n        this.currentEthDate = this.calendar.toEthiopian(gregDate);\n        this.render();\n      });\n      \n      this.popup.querySelector('.ethcal-greg-next-month').addEventListener('click', () => {\n        const gregDate = this.calendar.toGregorian(this.currentEthDate.year, this.currentEthDate.month, 15);\n        gregDate.setMonth(gregDate.getMonth() + 1);\n        this.currentEthDate = this.calendar.toEthiopian(gregDate);\n        this.render();\n      });\n\n      // Gregorian day selection\n      this.popup.querySelector('.ethcal-greg-days').addEventListener('click', (e) => {\n        if (e.target.classList.contains('ethcal-greg-day')) {\n          const day = parseInt(e.target.dataset.day);\n          const month = parseInt(e.target.dataset.month);\n          const year = parseInt(e.target.dataset.year);\n          \n          const gregorianDate = new Date(year, month, day);\n          const ethiopianDate = this.calendar.toEthiopian(gregorianDate);\n          \n          this.selectedDate = ethiopianDate;\n          this.currentEthDate = ethiopianDate;\n          this.render();\n          \n          if (this.options.onSelect) {\n            this.options.onSelect({\n              ethiopian: ethiopianDate,\n              gregorian: gregorianDate\n            });\n          }\n          \n          // Update input if provided\n          if (this.options.inputElement) {\n            this.options.inputElement.value = `${ethiopianDate.day}/${ethiopianDate.month}/${ethiopianDate.year}`;\n          }\n          \n          this.hide();\n        }\n      });\n    }\n    \n    // Day selection (Ethiopian or merged)\n    const daysSelector = this.options.mergedView ? '.ethcal-merged-days' : '.ethcal-days';\n    this.popup.querySelector(daysSelector).addEventListener('click', (e) => {\n      if (e.target.closest('.ethcal-day') && !e.target.closest('.ethcal-empty')) {\n        const dayCell = e.target.closest('.ethcal-day');\n        const day = parseInt(dayCell.dataset.day);\n        const month = parseInt(dayCell.dataset.month);\n        const year = parseInt(dayCell.dataset.year);\n        \n        this.selectedDate = { year, month, day };\n        this.render();\n        \n        if (this.options.onSelect) {\n          const gregorianDate = this.calendar.toGregorian(year, month, day);\n          this.options.onSelect({\n            ethiopian: { year, month, day },\n            gregorian: gregorianDate\n          });\n        }\n        \n        // Update input if provided\n        if (this.options.inputElement) {\n          this.options.inputElement.value = `${day}/${month}/${year}`;\n        }\n        \n        this.hide();\n      }\n    });\n    \n    // Today button\n    this.popup.querySelector('.ethcal-today').addEventListener('click', () => {\n      this.currentEthDate = this.calendar.now();\n      this.render();\n    });\n    \n    // Close on outside click\n    document.addEventListener('click', (e) => {\n      if (this.popup && \n          !this.popup.contains(e.target) && \n          e.target !== this.options.inputElement) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Set the current date\n   * @param {Date} date - Gregorian date\n   */\n  setDate(date) {\n    this.currentEthDate = this.calendar.toEthiopian(date);\n    if (this.popup) {\n      this.render();\n    }\n  }\n\n  /**\n   * Get the selected date\n   * @returns {Object} Selected date info\n   */\n  getSelectedDate() {\n    return this.selectedDate;\n  }\n}\n\nexport default EthiopianCalendarUI;\n"],"names":["EthiopianCalendar","constructor","this","monthNames","monthNamesAmharic","dayNames","dayNamesAmharic","_startDayOfEthiopian","year","newYearDay","Math","floor","toEthiopian","gregorianDate","getFullYear","month","getMonth","date","getDate","Error","gregorianMonths","ethiopianMonths","ethiopianYear","until","i","m","ethiopianDate","tahissas","length","day","toGregorian","gregorianYear","nextYear","Date","getDaysInMonth","isLeapYear","getDayOfWeek","getDay","getMonthName","useAmharic","getDayName","dayOfWeek","toEthiopicNumeral","num","ethiopicNumerals","result","remaining","tens","ones","toString","split","map","d","parseInt","join","now","options","calendar","onSelect","inputElement","initialDate","showGregorian","undefined","useEthiopicNumbers","mergedView","primaryCalendar","currentEthDate","selectedDate","popup","show","style","display","createPopup","document","body","appendChild","positionPopup","render","attachEventListeners","hide","destroy","remove","createElement","className","dayNamesHtml","isPrimaryEthiopian","yearPrevLabel","monthPrevLabel","monthNextLabel","yearNextLabel","innerHTML","rect","getBoundingClientRect","position","top","bottom","window","scrollY","left","scrollX","transform","querySelector","textContent","primaryMonthName","primaryYear","secondaryRange","getSecondaryMonthRange","secondaryText","isSameMonth","startMonth","startYear","startMonthName","endMonthName","endMonth","endYear","gregDate","gregYear","gregMonth","titleElement","updateWeekdayNames","renderMergedCalendar","renderDays","renderGregorianCalendar","selector","weekdaysContainer","daysContainer","daysInMonth","firstDayOfWeek","emptyCell","dayCell","dayText","dataset","today","classList","add","firstDay","todayGreg","selectedGreg","lastDay","firstMonth","firstYear","lastMonth","lastYear","firstEth","lastEth","primaryText","gregDay","currentGreg","ethDate","addEventListener","setFullYear","setMonth","e","target","contains","ethiopian","gregorian","value","daysSelector","closest","setDate","getSelectedDate"],"mappings":"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"}