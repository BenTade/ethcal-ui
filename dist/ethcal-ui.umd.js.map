{"version":3,"file":"ethcal-ui.umd.js","sources":["../src/calendar.js","../src/ui.js"],"sourcesContent":["/**\n * Ethiopian Calendar Utility\n * Converts between Gregorian and Ethiopian calendars\n * Ethiopian calendar has 13 months (12 months of 30 days + 1 month of 5/6 days)\n */\n\nclass EthiopianCalendar {\n  constructor() {\n    this.monthNames = [\n      'Meskerem', 'Tikimt', 'Hidar', 'Tahsas', 'Tir', 'Yekatit',\n      'Megabit', 'Miazia', 'Ginbot', 'Sene', 'Hamle', 'Nehase', 'Pagume'\n    ];\n\n    this.monthNamesAmharic = [\n      'መስከረም', 'ጥቅምት', 'ኅዳር', 'ታኅሣሥ', 'ጥር', 'የካቲት',\n      'መጋቢት', 'ሚያዝያ', 'ግንቦት', 'ሰኔ', 'ሐምሌ', 'ነሐሴ', 'ጳጉሜን'\n    ];\n    \n    this.dayNames = ['Ehud', 'Segno', 'Maksegno', 'Erob', 'Hamus', 'Arb', 'Kidame'];\n\n    this.dayNamesAmharic = ['እሁድ', 'ሰኞ', 'ማክሰኞ', 'ረቡዕ', 'ሐሙስ', 'ዓርብ', 'ቅዳሜ'];\n  }\n\n  /**\n   * Convert Gregorian date to Ethiopian date\n   * @param {Date} gregorianDate - Gregorian date object\n   * @returns {Object} Ethiopian date {year, month, day}\n   */\n  toEthiopian(gregorianDate) {\n    const year = gregorianDate.getFullYear();\n    const month = gregorianDate.getMonth() + 1;\n    const day = gregorianDate.getDate();\n    \n    // JDN (Julian Day Number) calculation\n    const a = Math.floor((14 - month) / 12);\n    const y = year + 4800 - a;\n    const m = month + 12 * a - 3;\n    \n    let jdn = day + Math.floor((153 * m + 2) / 5) + 365 * y + \n              Math.floor(y / 4) - Math.floor(y / 100) + \n              Math.floor(y / 400) - 32045;\n    \n    // Convert JDN to Ethiopian\n    const r = (jdn - 1723856) % 1461;\n    const n = (r % 365) + 365 * Math.floor(r / 1460);\n    \n    const ethYear = Math.floor((jdn - 1723856) / 1461) + 1;\n    const ethMonth = Math.floor(n / 30) + 1;\n    const ethDay = (n % 30) + 1;\n    \n    return {\n      year: ethYear,\n      month: ethMonth,\n      day: ethDay\n    };\n  }\n\n  /**\n   * Convert Ethiopian date to Gregorian date\n   * @param {number} year - Ethiopian year\n   * @param {number} month - Ethiopian month (1-13)\n   * @param {number} day - Ethiopian day\n   * @returns {Date} Gregorian date object\n   */\n  toGregorian(year, month, day) {\n    // Calculate JDN from Ethiopian date\n    const jdn = (year - 1) * 1461 / 4 + (month - 1) * 30 + day + 1723856;\n    \n    // Convert JDN to Gregorian\n    const a = jdn + 32044;\n    const b = Math.floor((4 * a + 3) / 146097);\n    const c = a - Math.floor(146097 * b / 4);\n    const d = Math.floor((4 * c + 3) / 1461);\n    const e = c - Math.floor(1461 * d / 4);\n    const m = Math.floor((5 * e + 2) / 153);\n    \n    const gregDay = e - Math.floor((153 * m + 2) / 5) + 1;\n    const gregMonth = m + 3 - 12 * Math.floor(m / 10);\n    const gregYear = 100 * b + d - 4800 + Math.floor(m / 10);\n    \n    return new Date(gregYear, gregMonth - 1, gregDay);\n  }\n\n  /**\n   * Get the number of days in an Ethiopian month\n   * @param {number} year - Ethiopian year\n   * @param {number} month - Ethiopian month (1-13)\n   * @returns {number} Number of days\n   */\n  getDaysInMonth(year, month) {\n    if (month < 13) {\n      return 30;\n    }\n    // Pagume has 5 days in common years, 6 in leap years\n    return this.isLeapYear(year) ? 6 : 5;\n  }\n\n  /**\n   * Check if an Ethiopian year is a leap year\n   * @param {number} year - Ethiopian year\n   * @returns {boolean} True if leap year\n   */\n  isLeapYear(year) {\n    return (year % 4) === 3;\n  }\n\n  /**\n   * Get the day of week for an Ethiopian date\n   * @param {number} year - Ethiopian year\n   * @param {number} month - Ethiopian month\n   * @param {number} day - Ethiopian day\n   * @returns {number} Day of week (0-6, 0 = Sunday)\n   */\n  getDayOfWeek(year, month, day) {\n    const gregDate = this.toGregorian(year, month, day);\n    return gregDate.getDay();\n  }\n\n  /**\n   * Get month name\n   * @param {number} month - Ethiopian month (1-13)\n   * @param {boolean} useAmharic - Use Amharic names\n   * @returns {string} Month name\n   */\n  getMonthName(month, useAmharic = false) {\n    const names = useAmharic ? this.monthNamesAmharic : this.monthNames;\n    return names[month - 1] || '';\n  }\n\n  /**\n   * Get day name\n   * @param {number} dayOfWeek - Day of week (0-6)\n   * @param {boolean} useAmharic - Use Amharic names\n   * @returns {string} Day name\n   */\n  getDayName(dayOfWeek, useAmharic = false) {\n    const names = useAmharic ? this.dayNamesAmharic : this.dayNames;\n    return names[dayOfWeek] || '';\n  }\n\n  /**\n   * Convert Arabic numerals to Ethiopic numerals\n   * @param {number} num - Number to convert\n   * @returns {string} Ethiopic numeral representation\n   */\n  toEthiopicNumeral(num) {\n    if (num === 0) return '0';\n    \n    const ethiopicNumerals = {\n      1: '፩', 2: '፪', 3: '፫', 4: '፬', 5: '፭',\n      6: '፮', 7: '፯', 8: '፰', 9: '፱', 10: '፲',\n      20: '፳', 30: '፴', 40: '፵', 50: '፶',\n      60: '፷', 70: '፸', 80: '፹', 90: '፺',\n      100: '፻', 10000: '፼'\n    };\n\n    if (ethiopicNumerals[num]) {\n      return ethiopicNumerals[num];\n    }\n\n    let result = '';\n    let remaining = num;\n\n    // Handle tens and ones (up to 99)\n    if (remaining < 100) {\n      const tens = Math.floor(remaining / 10) * 10;\n      const ones = remaining % 10;\n      \n      if (tens > 0) result += ethiopicNumerals[tens];\n      if (ones > 0) result += ethiopicNumerals[ones];\n      \n      return result;\n    }\n\n    // For numbers >= 100, use a simpler digit-by-digit approach\n    const digits = num.toString().split('');\n    return digits.map(d => ethiopicNumerals[parseInt(d)] || d).join('');\n  }\n\n  /**\n   * Get current Ethiopian date\n   * @returns {Object} Ethiopian date {year, month, day}\n   */\n  now() {\n    return this.toEthiopian(new Date());\n  }\n}\n\nexport default EthiopianCalendar;\n","import EthiopianCalendar from './calendar.js';\n\n/**\n * Ethiopian Calendar UI Popup Component\n */\nclass EthiopianCalendarUI {\n  constructor(options = {}) {\n    this.calendar = new EthiopianCalendar();\n    this.options = {\n      onSelect: options.onSelect || null,\n      inputElement: options.inputElement || null,\n      initialDate: options.initialDate || new Date(),\n      showGregorian: options.showGregorian !== undefined ? options.showGregorian : true,\n      useAmharic: options.useAmharic !== undefined ? options.useAmharic : true,\n      useEthiopicNumbers: options.useEthiopicNumbers !== undefined ? options.useEthiopicNumbers : false,\n      mergedView: options.mergedView !== undefined ? options.mergedView : false,\n      primaryCalendar: options.primaryCalendar || 'ethiopian', // 'ethiopian' or 'gregorian'\n      ...options\n    };\n    \n    this.currentEthDate = this.calendar.toEthiopian(this.options.initialDate);\n    this.selectedDate = null;\n    this.popup = null;\n  }\n\n  /**\n   * Create and show the calendar popup\n   */\n  show() {\n    if (this.popup) {\n      this.popup.style.display = 'block';\n      return;\n    }\n\n    this.popup = this.createPopup();\n    document.body.appendChild(this.popup);\n    \n    // Position popup\n    this.positionPopup();\n    \n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Hide the calendar popup\n   */\n  hide() {\n    if (this.popup) {\n      this.popup.style.display = 'none';\n    }\n  }\n\n  /**\n   * Destroy the popup\n   */\n  destroy() {\n    if (this.popup) {\n      this.popup.remove();\n      this.popup = null;\n    }\n  }\n\n  /**\n   * Create the popup DOM structure\n   */\n  createPopup() {\n    const popup = document.createElement('div');\n    popup.className = 'ethcal-popup';\n    \n    const dayNamesHtml = this.options.useAmharic \n      ? '<div>እሁድ</div><div>ሰኞ</div><div>ማክሰኞ</div><div>ረቡዕ</div><div>ሐሙስ</div><div>ዓርብ</div><div>ቅዳሜ</div>'\n      : '<div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>';\n\n    // Merged view - single calendar showing both dates\n    if (this.options.mergedView) {\n      const isPrimaryEthiopian = this.options.primaryCalendar === 'ethiopian';\n      popup.innerHTML = `\n        <div class=\"ethcal-options\">\n          <label>\n            <input type=\"checkbox\" class=\"ethcal-option-amharic\" ${this.options.useAmharic ? 'checked' : ''}>\n            <span>Use Amharic</span>\n          </label>\n          <label>\n            <input type=\"checkbox\" class=\"ethcal-option-ethiopic\" ${this.options.useEthiopicNumbers ? 'checked' : ''}>\n            <span>Ethiopic Numbers</span>\n          </label>\n          <label>\n            <input type=\"checkbox\" class=\"ethcal-option-primary\" ${isPrimaryEthiopian ? 'checked' : ''}>\n            <span>Ethiopian Primary</span>\n          </label>\n        </div>\n        <div class=\"ethcal-calendars ethcal-merged\">\n          <div class=\"ethcal-calendar ethcal-merged-calendar\">\n            <div class=\"ethcal-calendar-title\">${isPrimaryEthiopian ? 'Ethiopian' : 'Gregorian'} Calendar (Primary)</div>\n            <div class=\"ethcal-header\">\n              <button class=\"ethcal-prev-year\" aria-label=\"Previous Year\">&laquo;</button>\n              <button class=\"ethcal-prev-month\" aria-label=\"Previous Month\">&lsaquo;</button>\n              <div class=\"ethcal-current\">\n                <span class=\"ethcal-month-name\"></span>\n                <span class=\"ethcal-year\"></span>\n              </div>\n              <button class=\"ethcal-next-month\" aria-label=\"Next Month\">&rsaquo;</button>\n              <button class=\"ethcal-next-year\" aria-label=\"Next Year\">&raquo;</button>\n            </div>\n            <div class=\"ethcal-weekdays\">${dayNamesHtml}</div>\n            <div class=\"ethcal-days ethcal-merged-days\"></div>\n          </div>\n        </div>\n        <div class=\"ethcal-footer\">\n          <button class=\"ethcal-today\">Today</button>\n          <button class=\"ethcal-close\">Close</button>\n        </div>\n      `;\n    } else {\n      // Original side-by-side view\n      popup.innerHTML = `\n        <div class=\"ethcal-options\">\n          <label>\n            <input type=\"checkbox\" class=\"ethcal-option-amharic\" ${this.options.useAmharic ? 'checked' : ''}>\n            <span>Use Amharic</span>\n          </label>\n          <label>\n            <input type=\"checkbox\" class=\"ethcal-option-ethiopic\" ${this.options.useEthiopicNumbers ? 'checked' : ''}>\n            <span>Ethiopic Numbers</span>\n          </label>\n        </div>\n        <div class=\"ethcal-calendars\">\n          <div class=\"ethcal-calendar ethcal-ethiopian\">\n            <div class=\"ethcal-calendar-title\">Ethiopian Calendar</div>\n            <div class=\"ethcal-header\">\n              <button class=\"ethcal-prev-year\" aria-label=\"Previous Year\">&laquo;</button>\n              <button class=\"ethcal-prev-month\" aria-label=\"Previous Month\">&lsaquo;</button>\n              <div class=\"ethcal-current\">\n                <span class=\"ethcal-month-name\"></span>\n                <span class=\"ethcal-year\"></span>\n              </div>\n              <button class=\"ethcal-next-month\" aria-label=\"Next Month\">&rsaquo;</button>\n              <button class=\"ethcal-next-year\" aria-label=\"Next Year\">&raquo;</button>\n            </div>\n            <div class=\"ethcal-weekdays\">${dayNamesHtml}</div>\n            <div class=\"ethcal-days\"></div>\n          </div>\n          ${this.options.showGregorian ? `\n          <div class=\"ethcal-calendar ethcal-gregorian\">\n            <div class=\"ethcal-calendar-title\">Gregorian Calendar</div>\n            <div class=\"ethcal-header\">\n              <button class=\"ethcal-greg-prev-year\" aria-label=\"Previous Year\">&laquo;</button>\n              <button class=\"ethcal-greg-prev-month\" aria-label=\"Previous Month\">&lsaquo;</button>\n              <div class=\"ethcal-current\">\n                <span class=\"ethcal-greg-month-name\"></span>\n                <span class=\"ethcal-greg-year\"></span>\n              </div>\n              <button class=\"ethcal-greg-next-month\" aria-label=\"Next Month\">&rsaquo;</button>\n              <button class=\"ethcal-greg-next-year\" aria-label=\"Next Year\">&raquo;</button>\n            </div>\n            <div class=\"ethcal-weekdays\">\n              <div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>\n            </div>\n            <div class=\"ethcal-greg-days\"></div>\n          </div>\n          ` : ''}\n        </div>\n        <div class=\"ethcal-footer\">\n          <button class=\"ethcal-today\">Today</button>\n          <button class=\"ethcal-close\">Close</button>\n        </div>\n      `;\n    }\n    return popup;\n  }\n\n  /**\n   * Position popup near input element\n   */\n  positionPopup() {\n    if (this.options.inputElement) {\n      const rect = this.options.inputElement.getBoundingClientRect();\n      this.popup.style.position = 'absolute';\n      this.popup.style.top = (rect.bottom + window.scrollY + 5) + 'px';\n      this.popup.style.left = (rect.left + window.scrollX) + 'px';\n    } else {\n      // Center the popup if no input element\n      this.popup.style.position = 'fixed';\n      this.popup.style.top = '50%';\n      this.popup.style.left = '50%';\n      this.popup.style.transform = 'translate(-50%, -50%)';\n    }\n  }\n\n  /**\n   * Render the calendar\n   */\n  render() {\n    const { year, month } = this.currentEthDate;\n    \n    // Update calendar header\n    this.popup.querySelector('.ethcal-month-name').textContent = \n      this.calendar.getMonthName(month, this.options.useAmharic);\n    const yearText = this.options.useEthiopicNumbers \n      ? this.calendar.toEthiopicNumeral(year)\n      : year;\n    this.popup.querySelector('.ethcal-year').textContent = yearText;\n    \n    // Update title for merged view\n    if (this.options.mergedView) {\n      const isPrimaryEthiopian = this.options.primaryCalendar === 'ethiopian';\n      const titleElement = this.popup.querySelector('.ethcal-calendar-title');\n      if (titleElement) {\n        titleElement.textContent = `${isPrimaryEthiopian ? 'Ethiopian' : 'Gregorian'} Calendar (Primary)`;\n      }\n    }\n    \n    // Update weekday names based on useAmharic option\n    this.updateWeekdayNames();\n    \n    // Render appropriate calendar view\n    if (this.options.mergedView) {\n      this.renderMergedCalendar();\n    } else {\n      // Render Ethiopian calendar days\n      this.renderDays();\n      \n      // Render Gregorian calendar if enabled\n      if (this.options.showGregorian) {\n        this.renderGregorianCalendar();\n      }\n    }\n  }\n\n  /**\n   * Update weekday names based on options\n   */\n  updateWeekdayNames() {\n    const selector = this.options.mergedView ? '.ethcal-merged-calendar .ethcal-weekdays' : '.ethcal-ethiopian .ethcal-weekdays';\n    const weekdaysContainer = this.popup.querySelector(selector);\n    if (weekdaysContainer) {\n      if (this.options.useAmharic) {\n        weekdaysContainer.innerHTML = '<div>እሁድ</div><div>ሰኞ</div><div>ማክሰኞ</div><div>ረቡዕ</div><div>ሐሙስ</div><div>ዓርብ</div><div>ቅዳሜ</div>';\n      } else {\n        weekdaysContainer.innerHTML = '<div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>';\n      }\n    }\n  }\n\n  /**\n   * Render calendar days\n   */\n  renderDays() {\n    const { year, month } = this.currentEthDate;\n    const daysContainer = this.popup.querySelector('.ethcal-days');\n    daysContainer.innerHTML = '';\n    \n    const daysInMonth = this.calendar.getDaysInMonth(year, month);\n    const firstDayOfWeek = this.calendar.getDayOfWeek(year, month, 1);\n    \n    // Add empty cells for days before month starts\n    for (let i = 0; i < firstDayOfWeek; i++) {\n      const emptyCell = document.createElement('div');\n      emptyCell.className = 'ethcal-day ethcal-empty';\n      daysContainer.appendChild(emptyCell);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dayCell = document.createElement('div');\n      dayCell.className = 'ethcal-day';\n      const dayText = this.options.useEthiopicNumbers \n        ? this.calendar.toEthiopicNumeral(day)\n        : day;\n      dayCell.textContent = dayText;\n      dayCell.dataset.day = day;\n      dayCell.dataset.month = month;\n      dayCell.dataset.year = year;\n      \n      // Highlight today\n      const today = this.calendar.now();\n      if (year === today.year && month === today.month && day === today.day) {\n        dayCell.classList.add('ethcal-today-highlight');\n      }\n      \n      // Highlight selected date\n      if (this.selectedDate && \n          year === this.selectedDate.year && \n          month === this.selectedDate.month && \n          day === this.selectedDate.day) {\n        dayCell.classList.add('ethcal-selected');\n      }\n      \n      daysContainer.appendChild(dayCell);\n    }\n  }\n\n  /**\n   * Render Gregorian calendar\n   */\n  renderGregorianCalendar() {\n    const { year, month } = this.currentEthDate;\n    const gregDate = this.calendar.toGregorian(year, month, 1); // Use first day of month\n    const gregYear = gregDate.getFullYear();\n    const gregMonth = gregDate.getMonth();\n    \n    // Update header\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',\n                        'July', 'August', 'September', 'October', 'November', 'December'];\n    this.popup.querySelector('.ethcal-greg-month-name').textContent = monthNames[gregMonth];\n    this.popup.querySelector('.ethcal-greg-year').textContent = gregYear;\n    \n    // Render days\n    const daysContainer = this.popup.querySelector('.ethcal-greg-days');\n    daysContainer.innerHTML = '';\n    \n    const firstDay = new Date(gregYear, gregMonth, 1).getDay();\n    const daysInMonth = new Date(gregYear, gregMonth + 1, 0).getDate();\n    \n    // Add empty cells\n    for (let i = 0; i < firstDay; i++) {\n      const emptyCell = document.createElement('div');\n      emptyCell.className = 'ethcal-day ethcal-empty';\n      daysContainer.appendChild(emptyCell);\n    }\n    \n    // Add days\n    const todayGreg = new Date();\n    for (let d = 1; d <= daysInMonth; d++) {\n      const dayCell = document.createElement('div');\n      dayCell.className = 'ethcal-day ethcal-greg-day';\n      dayCell.textContent = d;\n      dayCell.dataset.day = d;\n      dayCell.dataset.month = gregMonth;\n      dayCell.dataset.year = gregYear;\n      \n      // Highlight today\n      if (gregYear === todayGreg.getFullYear() && \n          gregMonth === todayGreg.getMonth() && \n          d === todayGreg.getDate()) {\n        dayCell.classList.add('ethcal-today-highlight');\n      }\n      \n      // Highlight if this Gregorian date corresponds to the selected Ethiopian date\n      if (this.selectedDate) {\n        const selectedGreg = this.calendar.toGregorian(\n          this.selectedDate.year, \n          this.selectedDate.month, \n          this.selectedDate.day\n        );\n        if (gregYear === selectedGreg.getFullYear() && \n            gregMonth === selectedGreg.getMonth() && \n            d === selectedGreg.getDate()) {\n          dayCell.classList.add('ethcal-selected');\n        }\n      }\n      \n      daysContainer.appendChild(dayCell);\n    }\n  }\n\n  /**\n   * Render merged calendar showing both Ethiopian and Gregorian dates\n   */\n  renderMergedCalendar() {\n    const { year, month } = this.currentEthDate;\n    const isPrimaryEthiopian = this.options.primaryCalendar === 'ethiopian';\n    \n    const daysContainer = this.popup.querySelector('.ethcal-merged-days');\n    daysContainer.innerHTML = '';\n    \n    if (isPrimaryEthiopian) {\n      // Ethiopian is primary\n      const daysInMonth = this.calendar.getDaysInMonth(year, month);\n      const firstDayOfWeek = this.calendar.getDayOfWeek(year, month, 1);\n      \n      // Add empty cells for days before month starts\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const emptyCell = document.createElement('div');\n        emptyCell.className = 'ethcal-day ethcal-empty';\n        daysContainer.appendChild(emptyCell);\n      }\n      \n      // Add days of the month\n      const today = this.calendar.now();\n      for (let day = 1; day <= daysInMonth; day++) {\n        const dayCell = document.createElement('div');\n        dayCell.className = 'ethcal-day ethcal-merged-day';\n        \n        // Primary date (Ethiopian)\n        const primaryText = this.options.useEthiopicNumbers \n          ? this.calendar.toEthiopicNumeral(day)\n          : day;\n        \n        // Secondary date (Gregorian)\n        const gregDate = this.calendar.toGregorian(year, month, day);\n        const secondaryText = gregDate.getDate();\n        \n        dayCell.innerHTML = `\n          <span class=\"ethcal-primary-date\">${primaryText}</span>\n          <span class=\"ethcal-secondary-date\">${secondaryText}</span>\n        `;\n        \n        dayCell.dataset.day = day;\n        dayCell.dataset.month = month;\n        dayCell.dataset.year = year;\n        dayCell.dataset.gregDay = gregDate.getDate();\n        dayCell.dataset.gregMonth = gregDate.getMonth();\n        dayCell.dataset.gregYear = gregDate.getFullYear();\n        \n        // Highlight today\n        if (year === today.year && month === today.month && day === today.day) {\n          dayCell.classList.add('ethcal-today-highlight');\n        }\n        \n        // Highlight selected date\n        if (this.selectedDate && \n            year === this.selectedDate.year && \n            month === this.selectedDate.month && \n            day === this.selectedDate.day) {\n          dayCell.classList.add('ethcal-selected');\n        }\n        \n        daysContainer.appendChild(dayCell);\n      }\n    } else {\n      // Gregorian is primary\n      const gregDate = this.calendar.toGregorian(year, month, 1);\n      const gregYear = gregDate.getFullYear();\n      const gregMonth = gregDate.getMonth();\n      \n      const firstDay = new Date(gregYear, gregMonth, 1).getDay();\n      const daysInMonth = new Date(gregYear, gregMonth + 1, 0).getDate();\n      \n      // Add empty cells\n      for (let i = 0; i < firstDay; i++) {\n        const emptyCell = document.createElement('div');\n        emptyCell.className = 'ethcal-day ethcal-empty';\n        daysContainer.appendChild(emptyCell);\n      }\n      \n      // Add days\n      const todayGreg = new Date();\n      for (let d = 1; d <= daysInMonth; d++) {\n        const dayCell = document.createElement('div');\n        dayCell.className = 'ethcal-day ethcal-merged-day';\n        \n        // Primary date (Gregorian)\n        const primaryText = d;\n        \n        // Secondary date (Ethiopian)\n        const currentGreg = new Date(gregYear, gregMonth, d);\n        const ethDate = this.calendar.toEthiopian(currentGreg);\n        const secondaryText = this.options.useEthiopicNumbers \n          ? this.calendar.toEthiopicNumeral(ethDate.day)\n          : ethDate.day;\n        \n        dayCell.innerHTML = `\n          <span class=\"ethcal-primary-date\">${primaryText}</span>\n          <span class=\"ethcal-secondary-date\">${secondaryText}</span>\n        `;\n        \n        dayCell.dataset.day = ethDate.day;\n        dayCell.dataset.month = ethDate.month;\n        dayCell.dataset.year = ethDate.year;\n        dayCell.dataset.gregDay = d;\n        dayCell.dataset.gregMonth = gregMonth;\n        dayCell.dataset.gregYear = gregYear;\n        \n        // Highlight today\n        if (gregYear === todayGreg.getFullYear() && \n            gregMonth === todayGreg.getMonth() && \n            d === todayGreg.getDate()) {\n          dayCell.classList.add('ethcal-today-highlight');\n        }\n        \n        // Highlight selected date\n        if (this.selectedDate) {\n          const selectedGreg = this.calendar.toGregorian(\n            this.selectedDate.year, \n            this.selectedDate.month, \n            this.selectedDate.day\n          );\n          if (gregYear === selectedGreg.getFullYear() && \n              gregMonth === selectedGreg.getMonth() && \n              d === selectedGreg.getDate()) {\n            dayCell.classList.add('ethcal-selected');\n          }\n        }\n        \n        daysContainer.appendChild(dayCell);\n      }\n    }\n  }\n\n  /**\n   * Attach event listeners\n   */\n  attachEventListeners() {\n    // Options toggles\n    this.popup.querySelector('.ethcal-option-amharic').addEventListener('change', (e) => {\n      this.options.useAmharic = e.target.checked;\n      this.render();\n    });\n\n    this.popup.querySelector('.ethcal-option-ethiopic').addEventListener('change', (e) => {\n      this.options.useEthiopicNumbers = e.target.checked;\n      this.render();\n    });\n\n    // Primary calendar toggle (only in merged view)\n    const primaryToggle = this.popup.querySelector('.ethcal-option-primary');\n    if (primaryToggle) {\n      primaryToggle.addEventListener('change', (e) => {\n        this.options.primaryCalendar = e.target.checked ? 'ethiopian' : 'gregorian';\n        this.render();\n      });\n    }\n\n    // Ethiopian calendar navigation buttons\n    this.popup.querySelector('.ethcal-prev-year').addEventListener('click', () => {\n      this.currentEthDate.year--;\n      this.render();\n    });\n    \n    this.popup.querySelector('.ethcal-next-year').addEventListener('click', () => {\n      this.currentEthDate.year++;\n      this.render();\n    });\n    \n    this.popup.querySelector('.ethcal-prev-month').addEventListener('click', () => {\n      this.currentEthDate.month--;\n      if (this.currentEthDate.month < 1) {\n        this.currentEthDate.month = 13;\n        this.currentEthDate.year--;\n      }\n      this.render();\n    });\n    \n    this.popup.querySelector('.ethcal-next-month').addEventListener('click', () => {\n      this.currentEthDate.month++;\n      if (this.currentEthDate.month > 13) {\n        this.currentEthDate.month = 1;\n        this.currentEthDate.year++;\n      }\n      this.render();\n    });\n\n    // Gregorian calendar navigation buttons (if enabled and not merged)\n    if (this.options.showGregorian && !this.options.mergedView) {\n      this.popup.querySelector('.ethcal-greg-prev-year').addEventListener('click', () => {\n        const gregDate = this.calendar.toGregorian(this.currentEthDate.year, this.currentEthDate.month, 15);\n        gregDate.setFullYear(gregDate.getFullYear() - 1);\n        this.currentEthDate = this.calendar.toEthiopian(gregDate);\n        this.render();\n      });\n      \n      this.popup.querySelector('.ethcal-greg-next-year').addEventListener('click', () => {\n        const gregDate = this.calendar.toGregorian(this.currentEthDate.year, this.currentEthDate.month, 15);\n        gregDate.setFullYear(gregDate.getFullYear() + 1);\n        this.currentEthDate = this.calendar.toEthiopian(gregDate);\n        this.render();\n      });\n      \n      this.popup.querySelector('.ethcal-greg-prev-month').addEventListener('click', () => {\n        const gregDate = this.calendar.toGregorian(this.currentEthDate.year, this.currentEthDate.month, 15);\n        gregDate.setMonth(gregDate.getMonth() - 1);\n        this.currentEthDate = this.calendar.toEthiopian(gregDate);\n        this.render();\n      });\n      \n      this.popup.querySelector('.ethcal-greg-next-month').addEventListener('click', () => {\n        const gregDate = this.calendar.toGregorian(this.currentEthDate.year, this.currentEthDate.month, 15);\n        gregDate.setMonth(gregDate.getMonth() + 1);\n        this.currentEthDate = this.calendar.toEthiopian(gregDate);\n        this.render();\n      });\n\n      // Gregorian day selection\n      this.popup.querySelector('.ethcal-greg-days').addEventListener('click', (e) => {\n        if (e.target.classList.contains('ethcal-greg-day')) {\n          const day = parseInt(e.target.dataset.day);\n          const month = parseInt(e.target.dataset.month);\n          const year = parseInt(e.target.dataset.year);\n          \n          const gregorianDate = new Date(year, month, day);\n          const ethiopianDate = this.calendar.toEthiopian(gregorianDate);\n          \n          this.selectedDate = ethiopianDate;\n          this.currentEthDate = ethiopianDate;\n          this.render();\n          \n          if (this.options.onSelect) {\n            this.options.onSelect({\n              ethiopian: ethiopianDate,\n              gregorian: gregorianDate\n            });\n          }\n          \n          // Update input if provided\n          if (this.options.inputElement) {\n            this.options.inputElement.value = `${ethiopianDate.day}/${ethiopianDate.month}/${ethiopianDate.year}`;\n          }\n          \n          this.hide();\n        }\n      });\n    }\n    \n    // Day selection (Ethiopian or merged)\n    const daysSelector = this.options.mergedView ? '.ethcal-merged-days' : '.ethcal-days';\n    this.popup.querySelector(daysSelector).addEventListener('click', (e) => {\n      if (e.target.closest('.ethcal-day') && !e.target.closest('.ethcal-empty')) {\n        const dayCell = e.target.closest('.ethcal-day');\n        const day = parseInt(dayCell.dataset.day);\n        const month = parseInt(dayCell.dataset.month);\n        const year = parseInt(dayCell.dataset.year);\n        \n        this.selectedDate = { year, month, day };\n        this.render();\n        \n        if (this.options.onSelect) {\n          const gregorianDate = this.calendar.toGregorian(year, month, day);\n          this.options.onSelect({\n            ethiopian: { year, month, day },\n            gregorian: gregorianDate\n          });\n        }\n        \n        // Update input if provided\n        if (this.options.inputElement) {\n          this.options.inputElement.value = `${day}/${month}/${year}`;\n        }\n        \n        this.hide();\n      }\n    });\n    \n    // Today button\n    this.popup.querySelector('.ethcal-today').addEventListener('click', () => {\n      this.currentEthDate = this.calendar.now();\n      this.render();\n    });\n    \n    // Close button\n    this.popup.querySelector('.ethcal-close').addEventListener('click', () => {\n      this.hide();\n    });\n    \n    // Close on outside click\n    document.addEventListener('click', (e) => {\n      if (this.popup && \n          !this.popup.contains(e.target) && \n          e.target !== this.options.inputElement) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Set the current date\n   * @param {Date} date - Gregorian date\n   */\n  setDate(date) {\n    this.currentEthDate = this.calendar.toEthiopian(date);\n    if (this.popup) {\n      this.render();\n    }\n  }\n\n  /**\n   * Get the selected date\n   * @returns {Object} Selected date info\n   */\n  getSelectedDate() {\n    return this.selectedDate;\n  }\n}\n\nexport default EthiopianCalendarUI;\n"],"names":["EthiopianCalendar","constructor","this","monthNames","monthNamesAmharic","dayNames","dayNamesAmharic","toEthiopian","gregorianDate","year","getFullYear","month","getMonth","day","getDate","a","Math","floor","y","m","jdn","r","n","toGregorian","b","c","d","e","gregDay","gregMonth","gregYear","Date","getDaysInMonth","isLeapYear","getDayOfWeek","getDay","getMonthName","useAmharic","getDayName","dayOfWeek","toEthiopicNumeral","num","ethiopicNumerals","result","remaining","tens","ones","toString","split","map","parseInt","join","now","options","calendar","onSelect","inputElement","initialDate","showGregorian","undefined","useEthiopicNumbers","mergedView","primaryCalendar","currentEthDate","selectedDate","popup","show","style","display","createPopup","document","body","appendChild","positionPopup","render","attachEventListeners","hide","destroy","remove","createElement","className","dayNamesHtml","isPrimaryEthiopian","innerHTML","rect","getBoundingClientRect","position","top","bottom","window","scrollY","left","scrollX","transform","querySelector","textContent","yearText","titleElement","updateWeekdayNames","renderMergedCalendar","renderDays","renderGregorianCalendar","selector","weekdaysContainer","daysContainer","daysInMonth","firstDayOfWeek","i","emptyCell","dayCell","dayText","dataset","today","classList","add","gregDate","firstDay","todayGreg","selectedGreg","primaryText","secondaryText","currentGreg","ethDate","addEventListener","target","checked","primaryToggle","setFullYear","setMonth","contains","ethiopianDate","ethiopian","gregorian","value","daysSelector","closest","setDate","date","getSelectedDate"],"mappings":"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"}